# THIS SCRIPT WAS DESIGNED TO KEEP THE REPO SIZE SMALL THAT HOSTS THE ALLURE REPORTS
# OTHERWISE THE REPO SIZE WILL GROW WAY TOO BIG EVEN IF YOU DELETE THE FILES
# AT MY RATE IT WAS GROWING ABOUT 1GB EVERY TWO WEEKS, WHICH MEANS I'D HIT THE 5GB LIMIT QUICKLY
# BECAUSE GIT KEEPS THE HISTORY OF ALL FILES EVEN IF YOU DELETE THEM (AND THEY STILL COUNT TOWARDS THE SIZE)

# CAUTION: üö® This will rewrite the git history and remove .webm & .png files for good.
# WARNING: üíÄ Once executed, the files are permanently deleted from the git history.
# NOTICE!: üìå You need to go into the repo settings/actions/general/workflow permissions/enable set read+write
# EXTRA:   ‚ÑπÔ∏è The token used here is the built-in GITHUB_TOKEN. Not a personal access token (PAT). So you don't need to create a new token.
# EXTRA:   ‚ÑπÔ∏è At first, I tried git filter-repo, but had a bunch of issues to troubleshoot. So I used BFG Repo-Cleaner instead.
# EXTRA:   ‚ÑπÔ∏è I also tried the suggested way of cloning a mirror with git, but had issues later in the workflow.
# EXTRA:   ‚ÑπÔ∏è And that is why I ended up using the GitHub Marketplace Actions/Checkout with fetch-depth: 0.
# EXTRA:   ‚ÑπÔ∏è I think I got this all dialed in the way I want it now. Time will tell. lol

name: The Repo Clean-O-Matic

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"  # Every Sunday at midnight UTC

jobs:
  cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 10 #I'd set a timeout in case something hangs, which I've seen happen. This could waste your GitHub Actions minutes.
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout full repo history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: live-reports #If you're using the main branch for the reports, you can change this to main or just remove this line
          #One other thing to be aware of is, if you're using the main branch, you're gonna need to go into the repo settings
          #and I think it's under the branch protection rules area...click that checkbox that allows force push on the branch. 

      - name: Check starting repo size on GitHub
        continue-on-error: true
        run: |
          size=$(curl -s "https://api.github.com/repos/${{ github.repository }}" | jq -r '.size')
          size_mb=$(echo "scale=2; $size / 1024" | bc)
          size_gb=$(echo "scale=3; $size / 1024 / 1024" | bc)
          echo "Repo size before cleanup: ${size_mb} MB (or ${size_gb} GB if you prefer)"

      - name: Install BFG Repo-Cleaner
        run: |
          curl -L -o /tmp/bfg.jar https://repo1.maven.org/maven2/com/madgag/bfg/1.15.0/bfg-1.15.0.jar

      # Deleting files with BFG Repo-Cleaner
      # This started out with png and webm files, but I added more file
      # types to the list because the repo size was steadily increasing and 
      # it got back up to 160MB! Now it's down to 4MB. I think it was the .zip
      # files taking up all that extra space too.. I'm just gonna leave in all
      # the file types I have here though.

      # And I know it's messy having all the file types as different steps, but
      # it works... I'll eventually tinker with it to figure out the syntax
      # to get them all in one step, all in one line to clean things up, but
      # I'm wiped out for the day, so this is being added to the backlog.

      # If you really want to nuke the files, including any blobs referenced by the
      # latest commit (HEAD), then use --no-blob-protection AT YOUR OWN RISK!
      # Example:  java -jar /tmp/bfg.jar --delete-files '*.png' --no-blob-protection
      # If you do it, then it's gonna wipe out your current report and you'll end
      # up with a blank page..until you push some more commits and a new report is
      # created. I don't think you'd need to do this at least not for these reports,
      # but if you want to totally erase a sensitive file, then yeah you'd do it.

      ########### BEGIN DELETE FILE TYPE SECTION ###########
      - name: Delete .png files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.png'

      - name: Delete .webm files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.webm'
      
      - name: Delete .txt files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.txt'

      - name: Delete .css files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.css'

      - name: Delete .csv files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.csv'

      - name: Delete .js files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.js'

      - name: Delete .json files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.json'
      
      - name: Delete .zip files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.zip'

      - name: Delete .html files with BFG Repo-Cleaner
        run: |
          java -jar /tmp/bfg.jar --delete-files '*.html'
      ############ END DELETE FILE TYPE SECTION ############
      
      - name: Git cleanup
        run: |
          git reflog expire --expire=now --all
          git gc --prune=now --aggressive
          git repack -a -d -f
          git prune-packed

      # Make sure you update the branch name here if you're not using "live-reports" as your branch name.
      - name: Force push to GitHub
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin live-reports --force
          git push origin --force --tags

      - name: Upload BFG cleanup report files as artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: bfg-cleanup-report
          path: /home/runner/work/playwright-allure-report/playwright-allure-report.bfg-report/*
          if-no-files-found: warn
          retention-days: 7

      # GitHub typically takes a while to update the repo.size, which can significantly delay testing changes to the script. 
      # This creates a challenge during QA testing, as it's hard to tell if any issues are due to the changes you made or simply
      # because the repo size hasn't updated yet. 
      # It becomes even trickier when multiple changes are made, as it‚Äôs difficult to pinpoint which one actually caused the size change! 
      # If you're tweaking the script, it's best to wait at least a full day before checking the size to avoid confusion.
      # Hopefully this will help you avoid the headache of trying to figure out if the script is working or if it's just GitHub being slow to update. LOL
      
      # To avoid waiting for the repo.size update, you can clone a fresh local copy of the repository and check the history directly.
      # After cloning the repo, run the following commands to see what .webm or .png files are still present in the history:
      # https://git-scm.com/docs/git-rev-list
      # For .webm files:
      # git rev-list --objects --all | grep '\.webm$'
      #
      # For .png files:
      # git rev-list --objects --all | grep '\.png$'
      #
      # Or both together:
      # git rev-list --objects --all | grep -E '\.png$|\.webm$'

      # One last way you can check the size of the repo and not have to wait around for the GitHub repo.size to update
      # After you run the cleaner, just clone a new copy of the repo and run the following command: du -sh .git
      # Or just go navigate to the repo in your file explorer and right click it and get info on macOS
      
      - name: Delayed update of GitHub repository size after cleanup
        run: |
          echo "The repository size probably won't update immediately after running this workflow."
          echo "GitHub's backend takes time to recalculate and reflect the updated repository size."
          echo "For smaller repositories or minor changes, the size update may happen within a few hours."
          echo "For larger repositories or significant history rewrites, it can take up to 1-2 days"
          echo "You can manually check it later with:"
          echo "curl -s https://api.github.com/repos/${{ github.repository }} | jq -r '.size'"
          echo "That'll return the size in KB. Divide by 1024 to get MB."
        